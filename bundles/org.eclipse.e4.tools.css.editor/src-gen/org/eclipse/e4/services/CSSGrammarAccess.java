/*
* generated by Xtext
*/

package org.eclipse.e4.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CSSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StylesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stylesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationSTRINGTerminalRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Assignment cImportNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportNameCss_importParserRuleCall_1_0 = (RuleCall)cImportNameAssignment_1.eContents().get(0);
		private final Assignment cRulesetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesetRulesParserRuleCall_2_0 = (RuleCall)cRulesetAssignment_2.eContents().get(0);
		
		//stylesheet:
		//	location=STRING? importName+=css_import* ruleset+=Rules*;
		public ParserRule getRule() { return rule; }

		//location=STRING? importName+=css_import* ruleset+=Rules*
		public Group getGroup() { return cGroup; }

		//location=STRING?
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_0_0() { return cLocationSTRINGTerminalRuleCall_0_0; }

		//importName+=css_import*
		public Assignment getImportNameAssignment_1() { return cImportNameAssignment_1; }

		//css_import
		public RuleCall getImportNameCss_importParserRuleCall_1_0() { return cImportNameCss_importParserRuleCall_1_0; }

		//ruleset+=Rules*
		public Assignment getRulesetAssignment_2() { return cRulesetAssignment_2; }

		//Rules
		public RuleCall getRulesetRulesParserRuleCall_2_0() { return cRulesetRulesParserRuleCall_2_0; }
	}

	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorsSelectorParserRuleCall_0_0 = (RuleCall)cSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorsSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorsAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_1_0 = (RuleCall)cDeclarationsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rules:
		//	selectors+=selector ("," selectors+=selector)* "{" declarations+=declaration? (";" declarations+=declaration?)* "}";
		public ParserRule getRule() { return rule; }

		//selectors+=selector ("," selectors+=selector)* "{" declarations+=declaration? (";" declarations+=declaration?)* "}"
		public Group getGroup() { return cGroup; }

		//selectors+=selector
		public Assignment getSelectorsAssignment_0() { return cSelectorsAssignment_0; }

		//selector
		public RuleCall getSelectorsSelectorParserRuleCall_0_0() { return cSelectorsSelectorParserRuleCall_0_0; }

		//("," selectors+=selector)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//selectors+=selector
		public Assignment getSelectorsAssignment_1_1() { return cSelectorsAssignment_1_1; }

		//selector
		public RuleCall getSelectorsSelectorParserRuleCall_1_1_0() { return cSelectorsSelectorParserRuleCall_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//declarations+=declaration?
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }

		//(";" declarations+=declaration?)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//declarations+=declaration?
		public Assignment getDeclarationsAssignment_4_1() { return cDeclarationsAssignment_4_1; }

		//declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_1_0() { return cDeclarationsDeclarationParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Css_importElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cString_nameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cString_nameSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cString_nameAssignment_1_0.eContents().get(0);
		private final RuleCall cURIParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//css_import:
		//	"@import" (string_name=STRING | URI) ";";
		public ParserRule getRule() { return rule; }

		//"@import" (string_name=STRING | URI) ";"
		public Group getGroup() { return cGroup; }

		//"@import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//string_name=STRING | URI
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//string_name=STRING
		public Assignment getString_nameAssignment_1_0() { return cString_nameAssignment_1_0; }

		//STRING
		public RuleCall getString_nameSTRINGTerminalRuleCall_1_0_0() { return cString_nameSTRINGTerminalRuleCall_1_0_0; }

		//URI
		public RuleCall getURIParserRuleCall_1_1() { return cURIParserRuleCall_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSimpleselectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSimpleselectorsSimple_selectorParserRuleCall_0_0 = (RuleCall)cSimpleselectorsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cCombinatorAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cCombinatorCombinatorParserRuleCall_1_0_0_0 = (RuleCall)cCombinatorAssignment_1_0_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0_1_0 = (RuleCall)cSelectorAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cCombinatorAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cCombinatorCombinatorParserRuleCall_1_1_1_0_0 = (RuleCall)cCombinatorAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_1_1_1_0 = (RuleCall)cSelectorAssignment_1_1_1_1.eContents().get(0);
		
		//selector hidden():
		//	simpleselectors=simple_selector (combinator=combinator selector=selector | WS+ (combinator=combinator?
		//	selector=selector)?)?;
		public ParserRule getRule() { return rule; }

		//simpleselectors=simple_selector (combinator=combinator selector=selector | WS+ (combinator=combinator?
		//selector=selector)?)?
		public Group getGroup() { return cGroup; }

		//simpleselectors=simple_selector
		public Assignment getSimpleselectorsAssignment_0() { return cSimpleselectorsAssignment_0; }

		//simple_selector
		public RuleCall getSimpleselectorsSimple_selectorParserRuleCall_0_0() { return cSimpleselectorsSimple_selectorParserRuleCall_0_0; }

		//(combinator=combinator selector=selector | WS+ (combinator=combinator? selector=selector)?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//combinator=combinator selector=selector
		public Group getGroup_1_0() { return cGroup_1_0; }

		//combinator=combinator
		public Assignment getCombinatorAssignment_1_0_0() { return cCombinatorAssignment_1_0_0; }

		//combinator
		public RuleCall getCombinatorCombinatorParserRuleCall_1_0_0_0() { return cCombinatorCombinatorParserRuleCall_1_0_0_0; }

		//selector=selector
		public Assignment getSelectorAssignment_1_0_1() { return cSelectorAssignment_1_0_1; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0_1_0() { return cSelectorSelectorParserRuleCall_1_0_1_0; }

		//WS+ (combinator=combinator? selector=selector)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//WS+
		public RuleCall getWSTerminalRuleCall_1_1_0() { return cWSTerminalRuleCall_1_1_0; }

		//(combinator=combinator? selector=selector)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//combinator=combinator?
		public Assignment getCombinatorAssignment_1_1_1_0() { return cCombinatorAssignment_1_1_1_0; }

		//combinator
		public RuleCall getCombinatorCombinatorParserRuleCall_1_1_1_0_0() { return cCombinatorCombinatorParserRuleCall_1_1_1_0_0; }

		//selector=selector
		public Assignment getSelectorAssignment_1_1_1_1() { return cSelectorAssignment_1_1_1_1; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_1_1_1_1_0() { return cSelectorSelectorParserRuleCall_1_1_1_1_0; }
	}

	public class Simple_selectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cElementElement_nameParserRuleCall_0_0_0 = (RuleCall)cElementAssignment_0_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdCss_hash_classParserRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Assignment cPseudoAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPseudoPseudoParserRuleCall_0_2_0 = (RuleCall)cPseudoAssignment_0_2.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdCss_hash_classParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//simple_selector:
		//	element=element_name id+=css_hash_class* pseudo+=pseudo* | id+=css_hash_class+;
		public ParserRule getRule() { return rule; }

		//element=element_name id+=css_hash_class* pseudo+=pseudo* | id+=css_hash_class+
		public Alternatives getAlternatives() { return cAlternatives; }

		//element=element_name id+=css_hash_class* pseudo+=pseudo*
		public Group getGroup_0() { return cGroup_0; }

		//element=element_name
		public Assignment getElementAssignment_0_0() { return cElementAssignment_0_0; }

		//element_name
		public RuleCall getElementElement_nameParserRuleCall_0_0_0() { return cElementElement_nameParserRuleCall_0_0_0; }

		//id+=css_hash_class*
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//css_hash_class
		public RuleCall getIdCss_hash_classParserRuleCall_0_1_0() { return cIdCss_hash_classParserRuleCall_0_1_0; }

		//pseudo+=pseudo*
		public Assignment getPseudoAssignment_0_2() { return cPseudoAssignment_0_2; }

		//pseudo
		public RuleCall getPseudoPseudoParserRuleCall_0_2_0() { return cPseudoPseudoParserRuleCall_0_2_0; }

		//id+=css_hash_class+
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//css_hash_class
		public RuleCall getIdCss_hash_classParserRuleCall_1_0() { return cIdCss_hash_classParserRuleCall_1_0; }
	}

	public class PseudoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pseudo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFunctionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0_0 = (RuleCall)cFunctionAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//pseudo:
		//	":" name=ident | function=function name=ident?;
		public ParserRule getRule() { return rule; }

		//":" name=ident | function=function name=ident?
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" name=ident
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//name=ident
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ident
		public RuleCall getNameIdentTerminalRuleCall_0_1_0() { return cNameIdentTerminalRuleCall_0_1_0; }

		//function=function name=ident?
		public Group getGroup_1() { return cGroup_1; }

		//function=function
		public Assignment getFunctionAssignment_1_0() { return cFunctionAssignment_1_0; }

		//function
		public RuleCall getFunctionFunctionParserRuleCall_1_0_0() { return cFunctionFunctionParserRuleCall_1_0_0; }

		//name=ident?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ident
		public RuleCall getNameIdentTerminalRuleCall_1_1_0() { return cNameIdentTerminalRuleCall_1_1_0; }
	}

	public class Element_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "element_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameAsteriskKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//element_name:
		//	name=ident | name="*";
		public ParserRule getRule() { return rule; }

		//name=ident | name="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ident
		public RuleCall getNameIdentTerminalRuleCall_0_0() { return cNameIdentTerminalRuleCall_0_0; }

		//name="*"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"*"
		public Keyword getNameAsteriskKeyword_1_0() { return cNameAsteriskKeyword_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyIdentTerminalRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Assignment cPriorityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cPriorityImportantKeyword_3_0 = (Keyword)cPriorityAssignment_3.eContents().get(0);
		
		//declaration:
		//	property=ident ":" expr=expr priority="!important"?;
		public ParserRule getRule() { return rule; }

		//property=ident ":" expr=expr priority="!important"?
		public Group getGroup() { return cGroup; }

		//property=ident
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//ident
		public RuleCall getPropertyIdentTerminalRuleCall_0_0() { return cPropertyIdentTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//expr=expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//priority="!important"?
		public Assignment getPriorityAssignment_3() { return cPriorityAssignment_3; }

		//"!important"
		public Keyword getPriorityImportantKeyword_3_0() { return cPriorityImportantKeyword_3_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsSolidusKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsCommaKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Assignment cTermAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_1_0 = (RuleCall)cTermAssignment_1_1.eContents().get(0);
		
		//expr:
		//	term+=term (operators+=("/" | ",")? term+=term)*;
		public ParserRule getRule() { return rule; }

		//term+=term (operators+=("/" | ",")? term+=term)*
		public Group getGroup() { return cGroup; }

		//term+=term
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }

		//term
		public RuleCall getTermTermParserRuleCall_0_0() { return cTermTermParserRuleCall_0_0; }

		//(operators+=("/" | ",")? term+=term)*
		public Group getGroup_1() { return cGroup_1; }

		//operators+=("/" | ",")?
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }

		//"/" | ","
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }

		//"/"
		public Keyword getOperatorsSolidusKeyword_1_0_0_0() { return cOperatorsSolidusKeyword_1_0_0_0; }

		//","
		public Keyword getOperatorsCommaKeyword_1_0_0_1() { return cOperatorsCommaKeyword_1_0_0_1; }

		//term+=term
		public Assignment getTermAssignment_1_1() { return cTermAssignment_1_1; }

		//term
		public RuleCall getTermTermParserRuleCall_1_1_0() { return cTermTermParserRuleCall_1_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cUnaryAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryUnary_operatorParserRuleCall_0_0_0 = (RuleCall)cUnaryAssignment_0_0.eContents().get(0);
		private final Assignment cNumberAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumberUnary_numbersParserRuleCall_0_1_0 = (RuleCall)cNumberAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdIdentTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cUriAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cUriURIParserRuleCall_3_0 = (RuleCall)cUriAssignment_3.eContents().get(0);
		private final Assignment cColorAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cColorHexdigitsTerminalRuleCall_4_0 = (RuleCall)cColorAssignment_4.eContents().get(0);
		private final Assignment cFunctionAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cFunctionFunctionParserRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		
		//term:
		//	unary=unary_operator? number=unary_numbers | name=STRING | id=ident | uri=URI | color=hexdigits | function=function;
		public ParserRule getRule() { return rule; }

		//unary=unary_operator? number=unary_numbers | name=STRING | id=ident | uri=URI | color=hexdigits | function=function
		public Alternatives getAlternatives() { return cAlternatives; }

		//unary=unary_operator? number=unary_numbers
		public Group getGroup_0() { return cGroup_0; }

		//unary=unary_operator?
		public Assignment getUnaryAssignment_0_0() { return cUnaryAssignment_0_0; }

		//unary_operator
		public RuleCall getUnaryUnary_operatorParserRuleCall_0_0_0() { return cUnaryUnary_operatorParserRuleCall_0_0_0; }

		//number=unary_numbers
		public Assignment getNumberAssignment_0_1() { return cNumberAssignment_0_1; }

		//unary_numbers
		public RuleCall getNumberUnary_numbersParserRuleCall_0_1_0() { return cNumberUnary_numbersParserRuleCall_0_1_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//id=ident
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ident
		public RuleCall getIdIdentTerminalRuleCall_2_0() { return cIdIdentTerminalRuleCall_2_0; }

		//uri=URI
		public Assignment getUriAssignment_3() { return cUriAssignment_3; }

		//URI
		public RuleCall getUriURIParserRuleCall_3_0() { return cUriURIParserRuleCall_3_0; }

		//color=hexdigits
		public Assignment getColorAssignment_4() { return cColorAssignment_4; }

		//hexdigits
		public RuleCall getColorHexdigitsTerminalRuleCall_4_0() { return cColorHexdigitsTerminalRuleCall_4_0; }

		//function=function
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }

		//function
		public RuleCall getFunctionFunctionParserRuleCall_5_0() { return cFunctionFunctionParserRuleCall_5_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//function:
		//	name=ident "(" expr=expr ")";
		public ParserRule getRule() { return rule; }

		//name=ident "(" expr=expr ")"
		public Group getGroup() { return cGroup; }

		//name=ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ident
		public RuleCall getNameIdentTerminalRuleCall_0_0() { return cNameIdentTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class URIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cURIAction_2 = (Action)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_3_1_0_0 = (Keyword)cAlternatives_3_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_3_1_0_1 = (Keyword)cAlternatives_3_1_0.eContents().get(1);
		private final Assignment cIdAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cIdIdentTerminalRuleCall_3_1_1_0 = (RuleCall)cIdAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdIdentTerminalRuleCall_4_1_0 = (RuleCall)cIdAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//URI:
		//	"url" "(" {URI} (name+=STRING | ("\\" | "/") id+=ident)* ("." id+=ident)? ")";
		public ParserRule getRule() { return rule; }

		//"url" "(" {URI} (name+=STRING | ("\\" | "/") id+=ident)* ("." id+=ident)? ")"
		public Group getGroup() { return cGroup; }

		//"url"
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//{URI}
		public Action getURIAction_2() { return cURIAction_2; }

		//(name+=STRING | ("\\" | "/") id+=ident)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//name+=STRING
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0_0() { return cNameSTRINGTerminalRuleCall_3_0_0; }

		//("\\" | "/") id+=ident
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"\\" | "/"
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }

		//"\\"
		public Keyword getReverseSolidusKeyword_3_1_0_0() { return cReverseSolidusKeyword_3_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_3_1_0_1() { return cSolidusKeyword_3_1_0_1; }

		//id+=ident
		public Assignment getIdAssignment_3_1_1() { return cIdAssignment_3_1_1; }

		//ident
		public RuleCall getIdIdentTerminalRuleCall_3_1_1_0() { return cIdIdentTerminalRuleCall_3_1_1_0; }

		//("." id+=ident)?
		public Group getGroup_4() { return cGroup_4; }

		//"."
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }

		//id+=ident
		public Assignment getIdAssignment_4_1() { return cIdAssignment_4_1; }

		//ident
		public RuleCall getIdIdentTerminalRuleCall_4_1_0() { return cIdIdentTerminalRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class Unary_numbersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_numbers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPERCENTAGEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLENGTHParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEMSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEXSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cANGLEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTIMEParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFREQParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//unary_numbers:
		//	INT | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ;
		public ParserRule getRule() { return rule; }

		//INT | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//PERCENTAGE
		public RuleCall getPERCENTAGEParserRuleCall_1() { return cPERCENTAGEParserRuleCall_1; }

		//LENGTH
		public RuleCall getLENGTHParserRuleCall_2() { return cLENGTHParserRuleCall_2; }

		//EMS
		public RuleCall getEMSParserRuleCall_3() { return cEMSParserRuleCall_3; }

		//EXS
		public RuleCall getEXSParserRuleCall_4() { return cEXSParserRuleCall_4; }

		//ANGLE
		public RuleCall getANGLEParserRuleCall_5() { return cANGLEParserRuleCall_5; }

		//TIME
		public RuleCall getTIMEParserRuleCall_6() { return cTIMEParserRuleCall_6; }

		//FREQ
		public RuleCall getFREQParserRuleCall_7() { return cFREQParserRuleCall_7; }
	}

	public class PERCENTAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENTAGE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PERCENTAGE:
		//	INT "%";
		public ParserRule getRule() { return rule; }

		//INT "%"
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}

	public class EMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EMS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EMS:
		//	INT "em";
		public ParserRule getRule() { return rule; }

		//INT "em"
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"em"
		public Keyword getEmKeyword_1() { return cEmKeyword_1; }
	}

	public class EXSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EXS:
		//	INT "ex";
		public ParserRule getRule() { return rule; }

		//INT "ex"
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"ex"
		public Keyword getExKeyword_1() { return cExKeyword_1; }
	}

	public class LENGTHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LENGTH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPxKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCmKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cMmKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cInKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cPtKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cPcKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		
		//LENGTH hidden():
		//	INT ("px" | "cm" | "mm" | "in" | "pt" | "pc");
		public ParserRule getRule() { return rule; }

		//INT ("px" | "cm" | "mm" | "in" | "pt" | "pc")
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"px" | "cm" | "mm" | "in" | "pt" | "pc"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"px"
		public Keyword getPxKeyword_1_0() { return cPxKeyword_1_0; }

		//"cm"
		public Keyword getCmKeyword_1_1() { return cCmKeyword_1_1; }

		//"mm"
		public Keyword getMmKeyword_1_2() { return cMmKeyword_1_2; }

		//"in"
		public Keyword getInKeyword_1_3() { return cInKeyword_1_3; }

		//"pt"
		public Keyword getPtKeyword_1_4() { return cPtKeyword_1_4; }

		//"pc"
		public Keyword getPcKeyword_1_5() { return cPcKeyword_1_5; }
	}

	public class ANGLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ANGLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDegKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRadKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cGradKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//ANGLE:
		//	INT ("deg" | "rad" | "grad");
		public ParserRule getRule() { return rule; }

		//INT ("deg" | "rad" | "grad")
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"deg" | "rad" | "grad"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"deg"
		public Keyword getDegKeyword_1_0() { return cDegKeyword_1_0; }

		//"rad"
		public Keyword getRadKeyword_1_1() { return cRadKeyword_1_1; }

		//"grad"
		public Keyword getGradKeyword_1_2() { return cGradKeyword_1_2; }
	}

	public class TIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TIME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cMsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//TIME:
		//	INT ("ms" | "s");
		public ParserRule getRule() { return rule; }

		//INT ("ms" | "s")
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"ms" | "s"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"ms"
		public Keyword getMsKeyword_1_0() { return cMsKeyword_1_0; }

		//"s"
		public Keyword getSKeyword_1_1() { return cSKeyword_1_1; }
	}

	public class FREQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FREQ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHzKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cKhzKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//FREQ:
		//	INT ("hz" | "khz");
		public ParserRule getRule() { return rule; }

		//INT ("hz" | "khz")
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"hz" | "khz"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"hz"
		public Keyword getHzKeyword_1_0() { return cHzKeyword_1_0; }

		//"khz"
		public Keyword getKhzKeyword_1_1() { return cKhzKeyword_1_1; }
	}

	public class Css_hash_classElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "css_hash_class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeNumberSignKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeFullStopKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//css_hash_class:
		//	type=("#" | ".") name=ident;
		public ParserRule getRule() { return rule; }

		//type=("#" | ".") name=ident
		public Group getGroup() { return cGroup; }

		//type=("#" | ".")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"#" | "."
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//"#"
		public Keyword getTypeNumberSignKeyword_0_0_0() { return cTypeNumberSignKeyword_0_0_0; }

		//"."
		public Keyword getTypeFullStopKeyword_0_0_1() { return cTypeFullStopKeyword_0_0_1; }

		//name=ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
	}

	public class CombinatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "combinator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//combinator hidden(WS):
		//	"+" | ">";
		public ParserRule getRule() { return rule; }

		//"+" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}

	public class Unary_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//unary_operator:
		//	"-" | "+";
		public ParserRule getRule() { return rule; }

		//"-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}
	
	
	private StylesheetElements pStylesheet;
	private RulesElements pRules;
	private Css_importElements pCss_import;
	private SelectorElements pSelector;
	private Simple_selectorElements pSimple_selector;
	private PseudoElements pPseudo;
	private Element_nameElements pElement_name;
	private DeclarationElements pDeclaration;
	private ExprElements pExpr;
	private TermElements pTerm;
	private FunctionElements pFunction;
	private URIElements pURI;
	private Unary_numbersElements pUnary_numbers;
	private PERCENTAGEElements pPERCENTAGE;
	private EMSElements pEMS;
	private EXSElements pEXS;
	private LENGTHElements pLENGTH;
	private ANGLEElements pANGLE;
	private TIMEElements pTIME;
	private FREQElements pFREQ;
	private Css_hash_classElements pCss_hash_class;
	private TerminalRule tHexdigits;
	private TerminalRule tIdent;
	private CombinatorElements pCombinator;
	private Unary_operatorElements pUnary_operator;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CSSGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//stylesheet:
	//	location=STRING? importName+=css_import* ruleset+=Rules*;
	public StylesheetElements getStylesheetAccess() {
		return (pStylesheet != null) ? pStylesheet : (pStylesheet = new StylesheetElements());
	}
	
	public ParserRule getStylesheetRule() {
		return getStylesheetAccess().getRule();
	}

	//Rules:
	//	selectors+=selector ("," selectors+=selector)* "{" declarations+=declaration? (";" declarations+=declaration?)* "}";
	public RulesElements getRulesAccess() {
		return (pRules != null) ? pRules : (pRules = new RulesElements());
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}

	//css_import:
	//	"@import" (string_name=STRING | URI) ";";
	public Css_importElements getCss_importAccess() {
		return (pCss_import != null) ? pCss_import : (pCss_import = new Css_importElements());
	}
	
	public ParserRule getCss_importRule() {
		return getCss_importAccess().getRule();
	}

	//selector hidden():
	//	simpleselectors=simple_selector (combinator=combinator selector=selector | WS+ (combinator=combinator?
	//	selector=selector)?)?;
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//simple_selector:
	//	element=element_name id+=css_hash_class* pseudo+=pseudo* | id+=css_hash_class+;
	public Simple_selectorElements getSimple_selectorAccess() {
		return (pSimple_selector != null) ? pSimple_selector : (pSimple_selector = new Simple_selectorElements());
	}
	
	public ParserRule getSimple_selectorRule() {
		return getSimple_selectorAccess().getRule();
	}

	//pseudo:
	//	":" name=ident | function=function name=ident?;
	public PseudoElements getPseudoAccess() {
		return (pPseudo != null) ? pPseudo : (pPseudo = new PseudoElements());
	}
	
	public ParserRule getPseudoRule() {
		return getPseudoAccess().getRule();
	}

	//element_name:
	//	name=ident | name="*";
	public Element_nameElements getElement_nameAccess() {
		return (pElement_name != null) ? pElement_name : (pElement_name = new Element_nameElements());
	}
	
	public ParserRule getElement_nameRule() {
		return getElement_nameAccess().getRule();
	}

	//declaration:
	//	property=ident ":" expr=expr priority="!important"?;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//expr:
	//	term+=term (operators+=("/" | ",")? term+=term)*;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//term:
	//	unary=unary_operator? number=unary_numbers | name=STRING | id=ident | uri=URI | color=hexdigits | function=function;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//function:
	//	name=ident "(" expr=expr ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//URI:
	//	"url" "(" {URI} (name+=STRING | ("\\" | "/") id+=ident)* ("." id+=ident)? ")";
	public URIElements getURIAccess() {
		return (pURI != null) ? pURI : (pURI = new URIElements());
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//unary_numbers:
	//	INT | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ;
	public Unary_numbersElements getUnary_numbersAccess() {
		return (pUnary_numbers != null) ? pUnary_numbers : (pUnary_numbers = new Unary_numbersElements());
	}
	
	public ParserRule getUnary_numbersRule() {
		return getUnary_numbersAccess().getRule();
	}

	//PERCENTAGE:
	//	INT "%";
	public PERCENTAGEElements getPERCENTAGEAccess() {
		return (pPERCENTAGE != null) ? pPERCENTAGE : (pPERCENTAGE = new PERCENTAGEElements());
	}
	
	public ParserRule getPERCENTAGERule() {
		return getPERCENTAGEAccess().getRule();
	}

	//EMS:
	//	INT "em";
	public EMSElements getEMSAccess() {
		return (pEMS != null) ? pEMS : (pEMS = new EMSElements());
	}
	
	public ParserRule getEMSRule() {
		return getEMSAccess().getRule();
	}

	//EXS:
	//	INT "ex";
	public EXSElements getEXSAccess() {
		return (pEXS != null) ? pEXS : (pEXS = new EXSElements());
	}
	
	public ParserRule getEXSRule() {
		return getEXSAccess().getRule();
	}

	//LENGTH hidden():
	//	INT ("px" | "cm" | "mm" | "in" | "pt" | "pc");
	public LENGTHElements getLENGTHAccess() {
		return (pLENGTH != null) ? pLENGTH : (pLENGTH = new LENGTHElements());
	}
	
	public ParserRule getLENGTHRule() {
		return getLENGTHAccess().getRule();
	}

	//ANGLE:
	//	INT ("deg" | "rad" | "grad");
	public ANGLEElements getANGLEAccess() {
		return (pANGLE != null) ? pANGLE : (pANGLE = new ANGLEElements());
	}
	
	public ParserRule getANGLERule() {
		return getANGLEAccess().getRule();
	}

	//TIME:
	//	INT ("ms" | "s");
	public TIMEElements getTIMEAccess() {
		return (pTIME != null) ? pTIME : (pTIME = new TIMEElements());
	}
	
	public ParserRule getTIMERule() {
		return getTIMEAccess().getRule();
	}

	//FREQ:
	//	INT ("hz" | "khz");
	public FREQElements getFREQAccess() {
		return (pFREQ != null) ? pFREQ : (pFREQ = new FREQElements());
	}
	
	public ParserRule getFREQRule() {
		return getFREQAccess().getRule();
	}

	//css_hash_class:
	//	type=("#" | ".") name=ident;
	public Css_hash_classElements getCss_hash_classAccess() {
		return (pCss_hash_class != null) ? pCss_hash_class : (pCss_hash_class = new Css_hash_classElements());
	}
	
	public ParserRule getCss_hash_classRule() {
		return getCss_hash_classAccess().getRule();
	}

	//terminal hexdigits:
	//	"#" ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHexdigitsRule() {
		return (tHexdigits != null) ? tHexdigits : (tHexdigits = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hexdigits"));
	} 

	//terminal ident:
	//	("_" | "-" | "a".."z" | "A".."Z") ("_" | "-" | "a".."z" | "A".."Z" | "0".."9")*;
	public TerminalRule getIdentRule() {
		return (tIdent != null) ? tIdent : (tIdent = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ident"));
	} 

	//combinator hidden(WS):
	//	"+" | ">";
	public CombinatorElements getCombinatorAccess() {
		return (pCombinator != null) ? pCombinator : (pCombinator = new CombinatorElements());
	}
	
	public ParserRule getCombinatorRule() {
		return getCombinatorAccess().getRule();
	}

	//unary_operator:
	//	"-" | "+";
	public Unary_operatorElements getUnary_operatorAccess() {
		return (pUnary_operator != null) ? pUnary_operator : (pUnary_operator = new Unary_operatorElements());
	}
	
	public ParserRule getUnary_operatorRule() {
		return getUnary_operatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
