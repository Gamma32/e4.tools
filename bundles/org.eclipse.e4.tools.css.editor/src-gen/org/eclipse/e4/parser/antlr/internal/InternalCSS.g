/*
* generated by Xtext
*/
grammar InternalCSS;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.e4.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.e4.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.e4.services.CSSGrammarAccess;

}

@parser::members {

 	private CSSGrammarAccess grammarAccess;
 	
    public InternalCSSParser(TokenStream input, CSSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "stylesheet";	
   	}
   	
   	@Override
   	protected CSSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulestylesheet
entryRulestylesheet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStylesheetRule()); }
	 iv_rulestylesheet=rulestylesheet 
	 { $current=$iv_rulestylesheet.current; } 
	 EOF 
;

// Rule stylesheet
rulestylesheet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_location_0_0=RULE_STRING
		{
			newLeafNode(lv_location_0_0, grammarAccess.getStylesheetAccess().getLocationSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStylesheetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"location",
        		lv_location_0_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStylesheetAccess().getImportNameCss_importParserRuleCall_1_0()); 
	    }
		lv_importName_1_0=rulecss_import		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStylesheetRule());
	        }
       		add(
       			$current, 
       			"importName",
        		lv_importName_1_0, 
        		"css_import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStylesheetAccess().getRulesetRulesParserRuleCall_2_0()); 
	    }
		lv_ruleset_2_0=ruleRules		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStylesheetRule());
	        }
       		add(
       			$current, 
       			"ruleset",
        		lv_ruleset_2_0, 
        		"Rules");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleRules
entryRuleRules returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRulesRule()); }
	 iv_ruleRules=ruleRules 
	 { $current=$iv_ruleRules.current; } 
	 EOF 
;

// Rule Rules
ruleRules returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRulesAccess().getSelectorsSelectorParserRuleCall_0_0()); 
	    }
		lv_selectors_0_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_0_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRulesAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRulesAccess().getSelectorsSelectorParserRuleCall_1_1_0()); 
	    }
		lv_selectors_2_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesRule());
	        }
       		add(
       			$current, 
       			"selectors",
        		lv_selectors_2_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRulesAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRulesAccess().getDeclarationsDeclarationParserRuleCall_3_0()); 
	    }
		lv_declarations_4_0=ruledeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_0, 
        		"declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRulesAccess().getSemicolonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRulesAccess().getDeclarationsDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_declarations_6_0=ruledeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_6_0, 
        		"declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRulesAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulecss_import
entryRulecss_import returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_importRule()); }
	 iv_rulecss_import=rulecss_import 
	 { $current=$iv_rulecss_import.current; } 
	 EOF 
;

// Rule css_import
rulecss_import returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCss_importAccess().getImportKeyword_0());
    }
((
(
		lv_string_name_1_0=RULE_STRING
		{
			newLeafNode(lv_string_name_1_0, grammarAccess.getCss_importAccess().getString_nameSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCss_importRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string_name",
        		lv_string_name_1_0, 
        		"STRING");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getCss_importAccess().getURIParserRuleCall_1_1()); 
    }
    this_URI_2=ruleURI
    { 
        $current = $this_URI_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCss_importAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleselector
entryRuleselector returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	 iv_ruleselector=ruleselector 
	 { $current=$iv_ruleselector.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule selector
ruleselector returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSimpleselectorsSimple_selectorParserRuleCall_0_0()); 
	    }
		lv_simpleselectors_0_0=rulesimple_selector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"simpleselectors",
        		lv_simpleselectors_0_0, 
        		"simple_selector");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getCombinatorCombinatorParserRuleCall_1_0_0_0()); 
	    }
		lv_combinator_1_0=rulecombinator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"combinator",
        		lv_combinator_1_0, 
        		"combinator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSelectorSelectorParserRuleCall_1_0_1_0()); 
	    }
		lv_selector_2_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_2_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((this_WS_3=RULE_WS
    { 
    newLeafNode(this_WS_3, grammarAccess.getSelectorAccess().getWSTerminalRuleCall_1_1_0()); 
    }
)+((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getCombinatorCombinatorParserRuleCall_1_1_1_0_0()); 
	    }
		lv_combinator_4_0=rulecombinator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"combinator",
        		lv_combinator_4_0, 
        		"combinator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSelectorSelectorParserRuleCall_1_1_1_1_0()); 
	    }
		lv_selector_5_0=ruleselector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_5_0, 
        		"selector");
	        afterParserOrEnumRuleCall();
	    }

)
))?))?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulesimple_selector
entryRulesimple_selector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_selectorRule()); }
	 iv_rulesimple_selector=rulesimple_selector 
	 { $current=$iv_rulesimple_selector.current; } 
	 EOF 
;

// Rule simple_selector
rulesimple_selector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getElementElement_nameParserRuleCall_0_0_0()); 
	    }
		lv_element_0_0=ruleelement_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_0_0, 
        		"element_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getIdCss_hash_classParserRuleCall_0_1_0()); 
	    }
		lv_id_1_0=rulecss_hash_class		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		add(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"css_hash_class");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getPseudoPseudoParserRuleCall_0_2_0()); 
	    }
		lv_pseudo_2_0=rulepseudo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		add(
       			$current, 
       			"pseudo",
        		lv_pseudo_2_0, 
        		"pseudo");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_selectorAccess().getIdCss_hash_classParserRuleCall_1_0()); 
	    }
		lv_id_3_0=rulecss_hash_class		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_selectorRule());
	        }
       		add(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"css_hash_class");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRulepseudo
entryRulepseudo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPseudoRule()); }
	 iv_rulepseudo=rulepseudo 
	 { $current=$iv_rulepseudo.current; } 
	 EOF 
;

// Rule pseudo
rulepseudo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPseudoAccess().getColonKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_IDENT
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPseudoAccess().getNameIdentTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPseudoRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ident");
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPseudoAccess().getFunctionFunctionParserRuleCall_1_0_0()); 
	    }
		lv_function_2_0=rulefunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPseudoRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"function");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_IDENT
		{
			newLeafNode(lv_name_3_0, grammarAccess.getPseudoAccess().getNameIdentTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPseudoRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ident");
	    }

)
)?))
;





// Entry rule entryRuleelement_name
entryRuleelement_name returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElement_nameRule()); }
	 iv_ruleelement_name=ruleelement_name 
	 { $current=$iv_ruleelement_name.current; } 
	 EOF 
;

// Rule element_name
ruleelement_name returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_IDENT
		{
			newLeafNode(lv_name_0_0, grammarAccess.getElement_nameAccess().getNameIdentTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_nameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ident");
	    }

)
)
    |(
(
		lv_name_1_0=	'*' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getElement_nameAccess().getNameAsteriskKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_nameRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "*");
	    }

)
))
;





// Entry rule entryRuledeclaration
entryRuledeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruledeclaration=ruledeclaration 
	 { $current=$iv_ruledeclaration.current; } 
	 EOF 
;

// Rule declaration
ruledeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_property_0_0=RULE_IDENT
		{
			newLeafNode(lv_property_0_0, grammarAccess.getDeclarationAccess().getPropertyIdentTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"property",
        		lv_property_0_0, 
        		"ident");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_priority_3_0=	'!important' 
    {
        newLeafNode(lv_priority_3_0, grammarAccess.getDeclarationAccess().getPriorityImportantKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "priority", lv_priority_3_0, "!important");
	    }

)
)?)
;





// Entry rule entryRuleexpr
entryRuleexpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleexpr=ruleexpr 
	 { $current=$iv_ruleexpr.current; } 
	 EOF 
;

// Rule expr
ruleexpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getTermTermParserRuleCall_0_0()); 
	    }
		lv_term_0_0=ruleterm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		add(
       			$current, 
       			"term",
        		lv_term_0_0, 
        		"term");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_operators_1_1=	'/' 
    {
        newLeafNode(lv_operators_1_1, grammarAccess.getExprAccess().getOperatorsSolidusKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_1, null);
	    }

    |		lv_operators_1_2=	',' 
    {
        newLeafNode(lv_operators_1_2, grammarAccess.getExprAccess().getOperatorsCommaKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_2, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getTermTermParserRuleCall_1_1_0()); 
	    }
		lv_term_2_0=ruleterm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		add(
       			$current, 
       			"term",
        		lv_term_2_0, 
        		"term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current; } 
	 EOF 
;

// Rule term
ruleterm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getUnaryUnary_operatorParserRuleCall_0_0_0()); 
	    }
		lv_unary_0_0=ruleunary_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"unary",
        		lv_unary_0_0, 
        		"unary_operator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getNumberUnary_numbersParserRuleCall_0_1_0()); 
	    }
		lv_number_1_0=ruleunary_numbers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_1_0, 
        		"unary_numbers");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTermAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_id_3_0=RULE_IDENT
		{
			newLeafNode(lv_id_3_0, grammarAccess.getTermAccess().getIdIdentTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ident");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getUriURIParserRuleCall_3_0()); 
	    }
		lv_uri_4_0=ruleURI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"uri",
        		lv_uri_4_0, 
        		"URI");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_color_5_0=RULE_HEXDIGITS
		{
			newLeafNode(lv_color_5_0, grammarAccess.getTermAccess().getColorHexdigitsTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"color",
        		lv_color_5_0, 
        		"hexdigits");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getFunctionFunctionParserRuleCall_5_0()); 
	    }
		lv_function_6_0=rulefunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_6_0, 
        		"function");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefunction
entryRulefunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_rulefunction=rulefunction 
	 { $current=$iv_rulefunction.current; } 
	 EOF 
;

// Rule function
rulefunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_IDENT
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionAccess().getNameIdentTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ident");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleURI
entryRuleURI returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getURIRule()); }
	 iv_ruleURI=ruleURI 
	 { $current=$iv_ruleURI.current; } 
	 EOF 
;

// Rule URI
ruleURI returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='url' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getURIAccess().getUrlKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getURIAccess().getLeftParenthesisKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getURIAccess().getURIAction_2(),
            $current);
    }
)((
(
		lv_name_3_0=RULE_STRING
		{
			newLeafNode(lv_name_3_0, grammarAccess.getURIAccess().getNameSTRINGTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getURIRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"STRING");
	    }

)
)
    |((	otherlv_4='\\' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getURIAccess().getReverseSolidusKeyword_3_1_0_0());
    }

    |	otherlv_5='/' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getURIAccess().getSolidusKeyword_3_1_0_1());
    }
)(
(
		lv_id_6_0=RULE_IDENT
		{
			newLeafNode(lv_id_6_0, grammarAccess.getURIAccess().getIdIdentTerminalRuleCall_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getURIRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_6_0, 
        		"ident");
	    }

)
)))*(	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getURIAccess().getFullStopKeyword_4_0());
    }
(
(
		lv_id_8_0=RULE_IDENT
		{
			newLeafNode(lv_id_8_0, grammarAccess.getURIAccess().getIdIdentTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getURIRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_8_0, 
        		"ident");
	    }

)
))?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getURIAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleunary_numbers
entryRuleunary_numbers returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_numbersRule()); } 
	 iv_ruleunary_numbers=ruleunary_numbers 
	 { $current=$iv_ruleunary_numbers.current.getText(); }  
	 EOF 
;

// Rule unary_numbers
ruleunary_numbers returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getUnary_numbersAccess().getINTTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_numbersAccess().getPERCENTAGEParserRuleCall_1()); 
    }
    this_PERCENTAGE_1=rulePERCENTAGE    {
		$current.merge(this_PERCENTAGE_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_numbersAccess().getLENGTHParserRuleCall_2()); 
    }
    this_LENGTH_2=ruleLENGTH    {
		$current.merge(this_LENGTH_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_numbersAccess().getEMSParserRuleCall_3()); 
    }
    this_EMS_3=ruleEMS    {
		$current.merge(this_EMS_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_numbersAccess().getEXSParserRuleCall_4()); 
    }
    this_EXS_4=ruleEXS    {
		$current.merge(this_EXS_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_numbersAccess().getANGLEParserRuleCall_5()); 
    }
    this_ANGLE_5=ruleANGLE    {
		$current.merge(this_ANGLE_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_numbersAccess().getTIMEParserRuleCall_6()); 
    }
    this_TIME_6=ruleTIME    {
		$current.merge(this_TIME_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_numbersAccess().getFREQParserRuleCall_7()); 
    }
    this_FREQ_7=ruleFREQ    {
		$current.merge(this_FREQ_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePERCENTAGE
entryRulePERCENTAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPERCENTAGERule()); } 
	 iv_rulePERCENTAGE=rulePERCENTAGE 
	 { $current=$iv_rulePERCENTAGE.current.getText(); }  
	 EOF 
;

// Rule PERCENTAGE
rulePERCENTAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getPERCENTAGEAccess().getINTTerminalRuleCall_0()); 
    }

	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPERCENTAGEAccess().getPercentSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEMS
entryRuleEMS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEMSRule()); } 
	 iv_ruleEMS=ruleEMS 
	 { $current=$iv_ruleEMS.current.getText(); }  
	 EOF 
;

// Rule EMS
ruleEMS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getEMSAccess().getINTTerminalRuleCall_0()); 
    }

	kw='em' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEMSAccess().getEmKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEXS
entryRuleEXS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXSRule()); } 
	 iv_ruleEXS=ruleEXS 
	 { $current=$iv_ruleEXS.current.getText(); }  
	 EOF 
;

// Rule EXS
ruleEXS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getEXSAccess().getINTTerminalRuleCall_0()); 
    }

	kw='ex' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXSAccess().getExKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleLENGTH
entryRuleLENGTH returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getLENGTHRule()); } 
	 iv_ruleLENGTH=ruleLENGTH 
	 { $current=$iv_ruleLENGTH.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LENGTH
ruleLENGTH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLENGTHAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='px' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getPxKeyword_1_0()); 
    }

    |
	kw='cm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getCmKeyword_1_1()); 
    }

    |
	kw='mm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getMmKeyword_1_2()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getInKeyword_1_3()); 
    }

    |
	kw='pt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getPtKeyword_1_4()); 
    }

    |
	kw='pc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLENGTHAccess().getPcKeyword_1_5()); 
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleANGLE
entryRuleANGLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getANGLERule()); } 
	 iv_ruleANGLE=ruleANGLE 
	 { $current=$iv_ruleANGLE.current.getText(); }  
	 EOF 
;

// Rule ANGLE
ruleANGLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getANGLEAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='deg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANGLEAccess().getDegKeyword_1_0()); 
    }

    |
	kw='rad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANGLEAccess().getRadKeyword_1_1()); 
    }

    |
	kw='grad' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANGLEAccess().getGradKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleTIME
entryRuleTIME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTIMERule()); } 
	 iv_ruleTIME=ruleTIME 
	 { $current=$iv_ruleTIME.current.getText(); }  
	 EOF 
;

// Rule TIME
ruleTIME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getTIMEAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='ms' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTIMEAccess().getMsKeyword_1_0()); 
    }

    |
	kw='s' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTIMEAccess().getSKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleFREQ
entryRuleFREQ returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFREQRule()); } 
	 iv_ruleFREQ=ruleFREQ 
	 { $current=$iv_ruleFREQ.current.getText(); }  
	 EOF 
;

// Rule FREQ
ruleFREQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getFREQAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='hz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFREQAccess().getHzKeyword_1_0()); 
    }

    |
	kw='khz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFREQAccess().getKhzKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRulecss_hash_class
entryRulecss_hash_class returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCss_hash_classRule()); }
	 iv_rulecss_hash_class=rulecss_hash_class 
	 { $current=$iv_rulecss_hash_class.current; } 
	 EOF 
;

// Rule css_hash_class
rulecss_hash_class returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_type_0_1=	'#' 
    {
        newLeafNode(lv_type_0_1, grammarAccess.getCss_hash_classAccess().getTypeNumberSignKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCss_hash_classRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=	'.' 
    {
        newLeafNode(lv_type_0_2, grammarAccess.getCss_hash_classAccess().getTypeFullStopKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCss_hash_classRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

)

)
)(
(
		lv_name_1_0=RULE_IDENT
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCss_hash_classAccess().getNameIdentTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCss_hash_classRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ident");
	    }

)
))
;





// Entry rule entryRulecombinator
entryRulecombinator returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getCombinatorRule()); } 
	 iv_rulecombinator=rulecombinator 
	 { $current=$iv_rulecombinator.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule combinator
rulecombinator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCombinatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCombinatorAccess().getGreaterThanSignKeyword_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleunary_operator
entryRuleunary_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_operatorRule()); } 
	 iv_ruleunary_operator=ruleunary_operator 
	 { $current=$iv_ruleunary_operator.current.getText(); }  
	 EOF 
;

// Rule unary_operator
ruleunary_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getHyphenMinusKeyword_0()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getPlusSignKeyword_1()); 
    }
)
    ;





RULE_HEXDIGITS : '#' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_IDENT : ('_'|'-'|'a'..'z'|'A'..'Z') ('_'|'-'|'a'..'z'|'A'..'Z'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


